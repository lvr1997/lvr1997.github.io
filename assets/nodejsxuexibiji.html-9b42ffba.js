import{_ as n,p as s,q as a,Y as p}from"./framework-aa5c4115.js";const t={},e=p(`<h2 id="node内置模块" tabindex="-1"><a class="header-anchor" href="#node内置模块" aria-hidden="true">#</a> node内置模块</h2><p>fs 文件系统模块</p><p>path 路径模块，解决</p><p>http 用于创建服务</p><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><h2 id="express" tabindex="-1"><a class="header-anchor" href="#express" aria-hidden="true">#</a> Express</h2><h3 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h3><p>Express 官方把常见的中间件用法，分成了 5 大类，分别是：应用级别的中间件、路由级别的中间件、错误级别的中间件、Express内置的中间件、第三方的中间件</p><p><strong>应用级别的中间件</strong> 通过app.use app.get 或app.post方式创建的中间件</p><p><strong>路由级别的中间件</strong> 绑定到 express.Router0 实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。只不过，应用级别中间件是绑定到 app 实例上，路由级别中间件绑定到 router 实例上，代码示例如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 路由级别的中间件</span>
router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>funct <span class="token function">n</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> &#39;Time<span class="token operator">:</span>&quot;<span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6</span>
<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token string">&#39; /&#39;</span> <span class="token punctuation">,</span> router<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误级别的中间件</strong> 必须要注册在所有路由之后！ 专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。 格式: 错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是<code>(err, req, res, next).</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1.路由</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>“服务器内部发生了错误<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment">// 11 抛出一个自定义的错误2</span>
	res <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span> <span class="token string">&#39; Home Page.&#39;</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> reqnext</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 2.错误级别的中间件</span>
	console<span class="token punctuation">.</span><span class="token number">1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">&quot;发生了错误:.message&quot;</span><span class="token punctuation">)</span> <span class="token comment">//2.1 在服务器打印错误消息6</span>
	res <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Error!+ err.message&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 2.2 向客户些响应错误相关的内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Express内置的中间件</strong> 自Express 4.16.0 版本开始，Express 内置了3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验 express.static 快速托管静态资源的内置中间件，例如: HTML 文件、图片、CSS 样式等 (无兼容性) express.json 解析JSON 格式的请求体数据(有兼容性，仅在 4.16.0+ 版本中可用) express.urlencoded 解析 URL-encoded 格式的请求体数据 (有兼容性，仅在 4.16.0+ 版本中可用)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 配置解析 application/json 格式数据的内置中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 配置解析 application/x-www-form-urlencoded 格式数据的内置中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express <span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义中间件</strong> 例：自己手动模拟一个类似于 express.urlencoded 这样的中间件，来解析 POST 提交到服务器的表单数据. 实现步骤:</p><ol><li>定义中间件</li><li>监听 req的 data 事件 在中间件中，需要监听 req 对象的 data 事件，来获取客户端发送到服务器的数据如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后，分批发送到服务器。所以 data 事件可能会触发多次，每一次触发 data 事件时，获取到数据只是完整数据的一部分，需要手动对接收到的数据进行拼接。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义变量，用来存储客户端发送过来的请求体数据</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> &#39;
<span class="token comment">// 监听 req 对象的 data 事件 (客户端发送过来的新的请求体数据)</span>
req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
<span class="token comment">//拼接请求体数据，隐式转换为字符串</span>
str <span class="token operator">+=</span> chunk
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>监听 req的end 事件</li><li>使用querystring 模块解析请求体数据</li><li>将解析出来的数据对象挂载为 req.body</li><li>将自定义中间件封装为模块</li></ol>`,19),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","nodejsxuexibiji.html.vue"]]);export{r as default};
